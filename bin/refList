#!/usr/bin/env python3

import os
import argparse
from subprocess import call, check_output

parser = argparse.ArgumentParser(description='Create reference list using BibTeX file.')
parser.add_argument('-s', '--bibStyle', type=str, default='plain', help='Bibliography style to use')
parser.add_argument('-C', '--Class',    type=str, default='article', help='Set document class')
parser.add_argument('bibFile',          type=str, help='Path to .bib file to use.')
parser.add_argument('key',              type=str, nargs='+', help='Key(s) to cite')

args    = parser.parse_args()
bibFile = os.path.splitext( args.bibFile )[0]
tmpDir  = os.path.join('/', 'tmp', 'LaTeX_Ref_tmp')

os.makedirs(tmpDir, exist_ok=True)

texFile = os.path.join(tmpDir, 'refs.tex')
auxFile = '{}.aux'.format( os.path.splitext(texFile)[0] )
pdfFile = '{}.pdf'.format( os.path.splitext(texFile)[0] )
with open(texFile, 'w') as fid:
  fid.write( '\\documentclass{{{}}}\n'.format(args.Class) )
  if ('ametsoc' in args.bibStyle):
    fid.write( '\\bibpunct{(}{)}{;}{a}{}{,}\n' )

  fid.write( '\\begin{document}\n' )
#  fid.write( 'Testing string, needed for output\n' )
  fid.write( '\\citet{{{}}}\n'.format(','.join(args.key) ) )
  fid.write( '\\bibliographystyle{{{}}}\n'.format(args.bibStyle) )
  fid.write( '\\bibliography{{{}}}\n'.format(bibFile) )

  fid.write( '\\end{document}' )

latex  = ['pdflatex', os.path.basename( texFile )]
bibtex = ['bibtex',   os.path.basename( auxFile )]
for cmd in [latex, bibtex, latex, latex]:
  proc = call( cmd,  cwd = tmpDir )

for f in os.listdir(tmpDir):
  if not f.endswith('.pdf') and not f.endswith('.tex'):
    os.remove( os.path.join( tmpDir, f ) )

try:
  x = check_output( ['open', pdfFile] )
except:
  x = check_output( ['xdg-open', pdfFile] )

